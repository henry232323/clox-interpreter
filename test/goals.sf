import "time" as Time
import "iter" as Iter
import "task" as Task

var epic_sum = [1,3,5,7,9]
    |> Iter.map(fun (x: Number) => x + 1)
    |> Iter.filter(fun (x: Number) => x % 2 == 0)
    |> Iter.sum()

enum Result<T, E> {
    Ok(value: T),
    Err(error: E)
}

type Result<T, E> = [:ok, T] | [:error, E] // or maybe {:error, E} tuple with {}

interface Container<T> {
    var capacity: Number

    fun add_item!(item: T): Boolean
    fun add_item(item: T): Result<Boolean, RuntimeError>

    fun get_size()

    fun full?() {
        return this.get_size() >= capacity
    }
}

class Backpack(Container<Number>) {
    var capacity: Number
    var items: List<Number>

    fun init() {
        size = 0
        capacity = 16
    }

    fun length() {
        // Implicitly implements Length interface, used for getting length
    }

    fun string() {
        // Implicitly implements Stringable interface, used for printing
    }

    fun repr() {
        // Implicitly implements Representable interface, used for printing representations
    }

    fun hash() {
        // Implicitly implements Hashable interface, used for hashing
    }

    fun iter() {
        // Implicitly implements Iterable interface, used for iterating, returns an iterator
    }

    fun next() {
        // Implicitly implements Iterator interface, used for iterating, returns next item in the iteration
    }

    fun add_item!(item: Number): Boolean {
        if (list.length >= capacity) {
            throw RuntimeError("Attempted to add to a full container!")
            // Or maybe
            panic!("Attempted to add to a full container!")
        }
        list.push(item)

        return true
    }

    fun add_item(item: Number): Result<Boolean, RuntimeError> {
        return if (list.length >= capacity) {
            return Err(RuntimeError("Attempted to add to a full container!"))
        } else {
            list.push(item)
            return Ok(true)
        }
    }

    fun get_size() {
        return list.length
    }
}

var container: Container = Backpack()

try {
    container.add_item!(5)
    IO.println("Successfully added the item!")
} catch (error: RuntimeError) {
    IO.println("Failed to add the item!")
}

var success = match (container.add_item(5)) {
    Ok(_result) => result // Todo: guards, e.g. Ok(result) where result == True => true
    Err(_error) => false
}

Ok(result) = success // throw an error if the match doesn't succeed

// Deconstruction and matching
[head, *middle, tail] = [1,2,3,4,5] // TODO: Refine this syntax
IO.println(head) // 1
IO.println(tail) // 5
IO.println(middle) // [2, 3, 4]

// Also
[head, *tail] = [1,2,3,4,5]
[*head, tail] = [1,2,3,4,5]

interface User { // maybe dataclass?
    var username: String
    var age: Number
}

dataclass User { // Dataclasses support structural matching? E.g. typescript
    var username: String
    var age: Number
}

var henry: User = Json.parse_into<User>('{"username": "henry", "age": 10}') // Some form of runtime type access
// Or some other form of easy deserialization into a matching data type

fun get_dogs() {
    var dogs: List<Dog>
    while !(dogs = find_dogs()) {
        Task.sleep(0.1) // Awaiting is implicit, other tasks process
    }

    IO.println("We found the dogs")
}

Task.spawn(get_dogs)